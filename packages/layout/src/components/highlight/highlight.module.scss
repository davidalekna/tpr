@import '@tpr/theming/lib/variables.scss';

$vertical-space: $space-1;
$horizontal-space-inner: $space-4;
$horizontal-space-outer: $space-6;

.highlight {
	background-color: $colors-accents-2;
}

// Stack everything by default.
.highlightContent {
	min-height: 50px;
	display: flex;
	color: $white;
	flex-direction: column;
	font-weight: $font-weight-4;
	font-size: $font-size-3;
	line-height: $line-height-5;
}

.container {
	flex-direction: column;
}

.context {
	align-items: center;
	flex: 0 0 auto;
	padding: $vertical-space $horizontal-space-inner;
	border-top: 1px solid $colors-accents-1;
}

// Allow more space for .name as the viewport width grows.
.name {
	flex-grow: 1;
	align-items: center;
	padding: $vertical-space $horizontal-space-inner;
	background-color: $colors-primary-4;
}

// Use another div inside .reference so that at larger sizes a left border can come in on the inner element, but not extend
// to the top and bottom of the outer element.
.reference {
	white-space: nowrap;
	height: 100%;
	background-color: $colors-primary-4;
}

.reference > div {
	border-top: 1px solid rgba(202, 202, 202, 0.5);
	padding: $vertical-space $horizontal-space-inner;
	align-items: center;
	width: 100%;
}

@media (min-width: 42em) {
	// At larger sizes the background extends to the edge of the viewport beyond the app. On the left it
	// must be $colors-accents-2 with a border-top and to the right it must be $colors-primary-4, so a
	// ::before pseudo-element is used to cover up the .highlight background with a different one for half the width.
	.highlight {
		background-color: $colors-primary-4;
	}

	.highlight::before {
		content: ' ';
		position: absolute;
		left: 0;
		top: 0;
		width: 50%;
		height: 100%;
		border-top: 1px solid $colors-accents-1;
		box-sizing: border-box;
		background-color: $colors-accents-2;
		z-index: 0;
	}

	// At this width leave the .name and .reference stacked, but bring .container up alongside .context,
	// and match the width of .context to the logo in the Header component.

	// Remove the border on .context, and use z-index to raise the content above the pseudo-element creating
	// the background and longer border.
	.highlightContent {
		flex-direction: row;
		z-index: 1;
	}
	.context {
		padding: $vertical-space $horizontal-space-inner $vertical-space
			$horizontal-space-outer;
		width: 180px + ($horizontal-space-outer * 2); // 180px is image width in Header
		border: none;
	}
	.name {
		padding: $vertical-space $horizontal-space-inner;
	}
}

@media (min-width: 60em) {
	// At this width make .context bigger to match the width to the logo in the Header component,
	// and unstack .name and .reference to be side-by-side.
	.context {
		width: $sidebar-width;
	}
	.container {
		flex-direction: row;
	}
	.reference > div {
		border-top: none;
		border-left: 1px solid rgba(202, 202, 202, 0.5);
		margin: $vertical-space 0;
		padding: $vertical-space $horizontal-space-outer $vertical-space
			$horizontal-space-inner;
	}
}
